from typing import List, Optional, overload, Tuple, Type, TypeVar

class GraphWin(object):
    def __init__(self, name:str = "Graphics Window", width:int = 200,
                height:int = 200, autoflush:bool = True): ...
    def plot(self, x:float, y:float, color:str = 'black') -> None: ...
    def plotPixel(self, x:float, y:float, color:str = 'black') -> None: ...
    def setBackground(self, color:str) -> None: ...
    def close(self) -> None: ...
    def getMouse(self) -> Point: ...
    def checkMouse(self) -> Optional[Point]: ...
    def getKey(self) -> str: ...
    def checkKey(self) -> str: ...
    def setCoords(self, xll:float, yll:float, xur:float, yur:float) -> None:
        ...

class GraphicsObject(object):
    def setFill(self, color:str) -> None: ...
    def setOutline(self, color:str) -> None: ...
    def setWidth(self, pixels:float) -> None: ...
    def draw(self, w:GraphWin) -> GraphicsObject: ...
    def undraw(self) -> None: ...
    def move(self, dx:float, dy:float) -> None: ...
    #G = TypeVar('G', bound=GraphicsObject)
    def clone(self) -> Type[GraphicsObject]: ...

class Point(GraphicsObject):
    def __init__(self, x:float, y:float): ...
    def getX(self) -> float: ...
    def getY(self) -> float: ...
    
class Line(GraphicsObject):
    def __init__(self, p1:Point, p2:Point): ...
    def setArrow(self, spec:str) -> None: ...
    def getCenter(self) -> Point: ...
    def getP1(self) -> Point: ...
    def getP2(self) -> Point: ...

class Circle(GraphicsObject):
    def __init__(self, center:Point, radius:float): ...
    def getCenter(self) -> Point: ...
    def getRadius(self) -> float: ...
    def getP1(self) -> Point: ...
    def getP2(self) -> Point: ...

class Rectangle(GraphicsObject):
    def __init__(self, p1:Point, p2:Point): ...
    def getCenter(self) -> Point: ...
    def getP1(self) -> Point: ...
    def getP2(self) -> Point: ...

class Oval(GraphicsObject):
    def __init__(self, p1:Point, p2:Point): ...
    def getCenter(self) -> Point: ...
    def getP1(self) -> Point: ...
    def getP2(self) -> Point: ...

class Polygon(GraphicsObject):
    def __init__(self, *p:Point): ...
    def getPoints(self) -> List[Point]: ...
    
class Text(GraphicsObject):
    def __init__(self, anchorPt:Point, text:str): ...
    def setText(self, newText:str) -> None: ...
    def getText(self) -> str: ...
    def getAnchor(self) -> Point: ...
    def setFace(self, family:str) -> None: ...
    def setSize(self, size:int) -> None: ...
    def setStyle(self, style:str) -> None: ...
    def setTextColor(self, color:str) -> None: ...

class Entry(GraphicsObject):
    def __init__(self, centerPt:Point, width:float): ...
    def getAnchor(self) -> Point: ...
    def getText(self) -> str: ...
    def setText(self, newText:str) -> None: ...
    def setFace(self, family:str) -> None: ...
    def setSize(self, size:int) -> None: ...
    def setStyle(self, style:str) -> None: ...
    def setTextColor(self, color:str) -> None: ...

class Image(GraphicsObject):
    @overload
    def __init__(self, anchorPt:Point, filename:str): ...
    @overload
    def __init__(self, width:int, height:int): ...

    def getAnchor(self) -> Point: ...
    def getWidth(self) -> int: ...
    def getHeight(self) -> int: ...
    def getPixel(self, x:int, y:int) -> Tuple[int, int, int]: ...
    def setPixel(self, x:int, y:int, color:str) -> None: ...
    def save(self, filename:str) -> None: ...

def color_rgb(r:int, g:int, b:int) -> str: ...